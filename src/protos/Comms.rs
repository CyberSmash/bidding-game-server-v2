// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Comms.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ServerRequest)
pub struct ServerRequest {
    // message fields
    // @@protoc_insertion_point(field:ServerRequest.msgType)
    pub msgType: ::std::option::Option<::protobuf::EnumOrUnknown<server_request::MsgType>>,
    ///  The game has ended. Provide the results.
    // @@protoc_insertion_point(field:ServerRequest.gameEnd)
    pub gameEnd: ::protobuf::MessageField<GameEnd>,
    ///  Provided in BID_REQUEST
    // @@protoc_insertion_point(field:ServerRequest.gameState)
    pub gameState: ::protobuf::MessageField<GameState>,
    // @@protoc_insertion_point(field:ServerRequest.authResponse)
    pub authResponse: ::protobuf::MessageField<AuthResponse>,
    // @@protoc_insertion_point(field:ServerRequest.bidResponse)
    pub bidResponse: ::protobuf::MessageField<BidResponse>,
    // @@protoc_insertion_point(field:ServerRequest.bidReject)
    pub bidReject: ::protobuf::MessageField<BidReject>,
    // @@protoc_insertion_point(field:ServerRequest.authReject)
    pub authReject: ::protobuf::MessageField<AuthReject>,
    // @@protoc_insertion_point(field:ServerRequest.gameStart)
    pub gameStart: ::protobuf::MessageField<GameStart>,
    // special fields
    // @@protoc_insertion_point(special_field:ServerRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerRequest {
    fn default() -> &'a ServerRequest {
        <ServerRequest as ::protobuf::Message>::default_instance()
    }
}

impl ServerRequest {
    pub fn new() -> ServerRequest {
        ::std::default::Default::default()
    }

    // required .ServerRequest.MsgType msgType = 1;

    pub fn msgType(&self) -> server_request::MsgType {
        match self.msgType {
            Some(e) => e.enum_value_or(server_request::MsgType::AUTH_REQUEST),
            None => server_request::MsgType::AUTH_REQUEST,
        }
    }

    pub fn clear_msgType(&mut self) {
        self.msgType = ::std::option::Option::None;
    }

    pub fn has_msgType(&self) -> bool {
        self.msgType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_msgType(&mut self, v: server_request::MsgType) {
        self.msgType = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "msgType",
            |m: &ServerRequest| { &m.msgType },
            |m: &mut ServerRequest| { &mut m.msgType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, GameEnd>(
            "gameEnd",
            |m: &ServerRequest| { &m.gameEnd },
            |m: &mut ServerRequest| { &mut m.gameEnd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, GameState>(
            "gameState",
            |m: &ServerRequest| { &m.gameState },
            |m: &mut ServerRequest| { &mut m.gameState },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthResponse>(
            "authResponse",
            |m: &ServerRequest| { &m.authResponse },
            |m: &mut ServerRequest| { &mut m.authResponse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BidResponse>(
            "bidResponse",
            |m: &ServerRequest| { &m.bidResponse },
            |m: &mut ServerRequest| { &mut m.bidResponse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BidReject>(
            "bidReject",
            |m: &ServerRequest| { &m.bidReject },
            |m: &mut ServerRequest| { &mut m.bidReject },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthReject>(
            "authReject",
            |m: &ServerRequest| { &m.authReject },
            |m: &mut ServerRequest| { &mut m.authReject },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, GameStart>(
            "gameStart",
            |m: &ServerRequest| { &m.gameStart },
            |m: &mut ServerRequest| { &mut m.gameStart },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerRequest>(
            "ServerRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerRequest {
    const NAME: &'static str = "ServerRequest";

    fn is_initialized(&self) -> bool {
        if self.msgType.is_none() {
            return false;
        }
        for v in &self.gameEnd {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gameState {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.authResponse {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bidResponse {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bidReject {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.authReject {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gameStart {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.msgType = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gameEnd)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gameState)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.authResponse)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bidResponse)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.bidReject)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.authReject)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.gameStart)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.msgType {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.gameEnd.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gameState.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.authResponse.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.bidResponse.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.bidReject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.authReject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.gameStart.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.msgType {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.gameEnd.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.gameState.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.authResponse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.bidResponse.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.bidReject.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.authReject.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.gameStart.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerRequest {
        ServerRequest::new()
    }

    fn clear(&mut self) {
        self.msgType = ::std::option::Option::None;
        self.gameEnd.clear();
        self.gameState.clear();
        self.authResponse.clear();
        self.bidResponse.clear();
        self.bidReject.clear();
        self.authReject.clear();
        self.gameStart.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerRequest {
        static instance: ServerRequest = ServerRequest {
            msgType: ::std::option::Option::None,
            gameEnd: ::protobuf::MessageField::none(),
            gameState: ::protobuf::MessageField::none(),
            authResponse: ::protobuf::MessageField::none(),
            bidResponse: ::protobuf::MessageField::none(),
            bidReject: ::protobuf::MessageField::none(),
            authReject: ::protobuf::MessageField::none(),
            gameStart: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ServerRequest`
pub mod server_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:ServerRequest.MsgType)
    pub enum MsgType {
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.AUTH_REQUEST)
        AUTH_REQUEST = 0,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.AUTH_RESPONSE)
        AUTH_RESPONSE = 8,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.AUTH_REJECT)
        AUTH_REJECT = 1,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.BID_REQUEST)
        BID_REQUEST = 2,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.BID_RESPONSE)
        BID_RESPONSE = 3,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.BID_REJECT)
        BID_REJECT = 4,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.GAME_START)
        GAME_START = 5,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.GAME_END)
        GAME_END = 6,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.DISCONNECT)
        DISCONNECT = 7,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.ACK)
        ACK = 9,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.GAME_ABORT)
        GAME_ABORT = 10,
        // @@protoc_insertion_point(enum_value:ServerRequest.MsgType.ALIVE)
        ALIVE = 11,
    }

    impl ::protobuf::Enum for MsgType {
        const NAME: &'static str = "MsgType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<MsgType> {
            match value {
                0 => ::std::option::Option::Some(MsgType::AUTH_REQUEST),
                8 => ::std::option::Option::Some(MsgType::AUTH_RESPONSE),
                1 => ::std::option::Option::Some(MsgType::AUTH_REJECT),
                2 => ::std::option::Option::Some(MsgType::BID_REQUEST),
                3 => ::std::option::Option::Some(MsgType::BID_RESPONSE),
                4 => ::std::option::Option::Some(MsgType::BID_REJECT),
                5 => ::std::option::Option::Some(MsgType::GAME_START),
                6 => ::std::option::Option::Some(MsgType::GAME_END),
                7 => ::std::option::Option::Some(MsgType::DISCONNECT),
                9 => ::std::option::Option::Some(MsgType::ACK),
                10 => ::std::option::Option::Some(MsgType::GAME_ABORT),
                11 => ::std::option::Option::Some(MsgType::ALIVE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [MsgType] = &[
            MsgType::AUTH_REQUEST,
            MsgType::AUTH_RESPONSE,
            MsgType::AUTH_REJECT,
            MsgType::BID_REQUEST,
            MsgType::BID_RESPONSE,
            MsgType::BID_REJECT,
            MsgType::GAME_START,
            MsgType::GAME_END,
            MsgType::DISCONNECT,
            MsgType::ACK,
            MsgType::GAME_ABORT,
            MsgType::ALIVE,
        ];
    }

    impl ::protobuf::EnumFull for MsgType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ServerRequest.MsgType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                MsgType::AUTH_REQUEST => 0,
                MsgType::AUTH_RESPONSE => 1,
                MsgType::AUTH_REJECT => 2,
                MsgType::BID_REQUEST => 3,
                MsgType::BID_RESPONSE => 4,
                MsgType::BID_REJECT => 5,
                MsgType::GAME_START => 6,
                MsgType::GAME_END => 7,
                MsgType::DISCONNECT => 8,
                MsgType::ACK => 9,
                MsgType::GAME_ABORT => 10,
                MsgType::ALIVE => 11,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for MsgType {
        fn default() -> Self {
            MsgType::AUTH_REQUEST
        }
    }

    impl MsgType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MsgType>("ServerRequest.MsgType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GameEnd)
pub struct GameEnd {
    // message fields
    // @@protoc_insertion_point(field:GameEnd.result)
    pub result: ::std::option::Option<::protobuf::EnumOrUnknown<game_end::GameResult>>,
    // special fields
    // @@protoc_insertion_point(special_field:GameEnd.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameEnd {
    fn default() -> &'a GameEnd {
        <GameEnd as ::protobuf::Message>::default_instance()
    }
}

impl GameEnd {
    pub fn new() -> GameEnd {
        ::std::default::Default::default()
    }

    // required .GameEnd.GameResult result = 1;

    pub fn result(&self) -> game_end::GameResult {
        match self.result {
            Some(e) => e.enum_value_or(game_end::GameResult::WIN),
            None => game_end::GameResult::WIN,
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: game_end::GameResult) {
        self.result = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &GameEnd| { &m.result },
            |m: &mut GameEnd| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GameEnd>(
            "GameEnd",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GameEnd {
    const NAME: &'static str = "GameEnd";

    fn is_initialized(&self) -> bool {
        if self.result.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameEnd {
        GameEnd::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameEnd {
        static instance: GameEnd = GameEnd {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GameEnd {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameEnd").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameEnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameEnd {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GameEnd`
pub mod game_end {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:GameEnd.GameResult)
    pub enum GameResult {
        // @@protoc_insertion_point(enum_value:GameEnd.GameResult.WIN)
        WIN = 0,
        // @@protoc_insertion_point(enum_value:GameEnd.GameResult.LOSS)
        LOSS = 1,
        // @@protoc_insertion_point(enum_value:GameEnd.GameResult.DRAW)
        DRAW = 2,
    }

    impl ::protobuf::Enum for GameResult {
        const NAME: &'static str = "GameResult";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<GameResult> {
            match value {
                0 => ::std::option::Option::Some(GameResult::WIN),
                1 => ::std::option::Option::Some(GameResult::LOSS),
                2 => ::std::option::Option::Some(GameResult::DRAW),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [GameResult] = &[
            GameResult::WIN,
            GameResult::LOSS,
            GameResult::DRAW,
        ];
    }

    impl ::protobuf::EnumFull for GameResult {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("GameEnd.GameResult").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for GameResult {
        fn default() -> Self {
            GameResult::WIN
        }
    }

    impl GameResult {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<GameResult>("GameEnd.GameResult")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GameStart)
pub struct GameStart {
    // message fields
    // @@protoc_insertion_point(field:GameStart.player1_name)
    pub player1_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:GameStart.player2_name)
    pub player2_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:GameStart.player1_start_money)
    pub player1_start_money: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:GameStart.player2_start_money)
    pub player2_start_money: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:GameStart.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameStart {
    fn default() -> &'a GameStart {
        <GameStart as ::protobuf::Message>::default_instance()
    }
}

impl GameStart {
    pub fn new() -> GameStart {
        ::std::default::Default::default()
    }

    // required string player1_name = 1;

    pub fn player1_name(&self) -> &str {
        match self.player1_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_player1_name(&mut self) {
        self.player1_name = ::std::option::Option::None;
    }

    pub fn has_player1_name(&self) -> bool {
        self.player1_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player1_name(&mut self, v: ::std::string::String) {
        self.player1_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player1_name(&mut self) -> &mut ::std::string::String {
        if self.player1_name.is_none() {
            self.player1_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.player1_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_player1_name(&mut self) -> ::std::string::String {
        self.player1_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string player2_name = 2;

    pub fn player2_name(&self) -> &str {
        match self.player2_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_player2_name(&mut self) {
        self.player2_name = ::std::option::Option::None;
    }

    pub fn has_player2_name(&self) -> bool {
        self.player2_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player2_name(&mut self, v: ::std::string::String) {
        self.player2_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player2_name(&mut self) -> &mut ::std::string::String {
        if self.player2_name.is_none() {
            self.player2_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.player2_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_player2_name(&mut self) -> ::std::string::String {
        self.player2_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 player1_start_money = 3;

    pub fn player1_start_money(&self) -> u32 {
        self.player1_start_money.unwrap_or(0)
    }

    pub fn clear_player1_start_money(&mut self) {
        self.player1_start_money = ::std::option::Option::None;
    }

    pub fn has_player1_start_money(&self) -> bool {
        self.player1_start_money.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player1_start_money(&mut self, v: u32) {
        self.player1_start_money = ::std::option::Option::Some(v);
    }

    // required uint32 player2_start_money = 4;

    pub fn player2_start_money(&self) -> u32 {
        self.player2_start_money.unwrap_or(0)
    }

    pub fn clear_player2_start_money(&mut self) {
        self.player2_start_money = ::std::option::Option::None;
    }

    pub fn has_player2_start_money(&self) -> bool {
        self.player2_start_money.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player2_start_money(&mut self, v: u32) {
        self.player2_start_money = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player1_name",
            |m: &GameStart| { &m.player1_name },
            |m: &mut GameStart| { &mut m.player1_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player2_name",
            |m: &GameStart| { &m.player2_name },
            |m: &mut GameStart| { &mut m.player2_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player1_start_money",
            |m: &GameStart| { &m.player1_start_money },
            |m: &mut GameStart| { &mut m.player1_start_money },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player2_start_money",
            |m: &GameStart| { &m.player2_start_money },
            |m: &mut GameStart| { &mut m.player2_start_money },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GameStart>(
            "GameStart",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GameStart {
    const NAME: &'static str = "GameStart";

    fn is_initialized(&self) -> bool {
        if self.player1_name.is_none() {
            return false;
        }
        if self.player2_name.is_none() {
            return false;
        }
        if self.player1_start_money.is_none() {
            return false;
        }
        if self.player2_start_money.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player1_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.player2_name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.player1_start_money = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.player2_start_money = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player1_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.player2_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.player1_start_money {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.player2_start_money {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player1_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.player2_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.player1_start_money {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.player2_start_money {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameStart {
        GameStart::new()
    }

    fn clear(&mut self) {
        self.player1_name = ::std::option::Option::None;
        self.player2_name = ::std::option::Option::None;
        self.player1_start_money = ::std::option::Option::None;
        self.player2_start_money = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameStart {
        static instance: GameStart = GameStart {
            player1_name: ::std::option::Option::None,
            player2_name: ::std::option::Option::None,
            player1_start_money: ::std::option::Option::None,
            player2_start_money: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GameStart {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameStart").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameStart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameStart {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GameState)
pub struct GameState {
    // message fields
    ///  player1's bids
    // @@protoc_insertion_point(field:GameState.player1_bids)
    pub player1_bids: ::std::vec::Vec<u32>,
    ///  player2's bids.
    // @@protoc_insertion_point(field:GameState.player2_bids)
    pub player2_bids: ::std::vec::Vec<u32>,
    ///  Who the receiving player is
    // @@protoc_insertion_point(field:GameState.current_player)
    pub current_player: ::std::option::Option<u32>,
    ///  Where is the bottle?
    // @@protoc_insertion_point(field:GameState.bottle_pos)
    pub bottle_pos: ::std::option::Option<u32>,
    ///  Current player money left
    // @@protoc_insertion_point(field:GameState.money_left)
    pub money_left: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:GameState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GameState {
    fn default() -> &'a GameState {
        <GameState as ::protobuf::Message>::default_instance()
    }
}

impl GameState {
    pub fn new() -> GameState {
        ::std::default::Default::default()
    }

    // required uint32 current_player = 3;

    pub fn current_player(&self) -> u32 {
        self.current_player.unwrap_or(0)
    }

    pub fn clear_current_player(&mut self) {
        self.current_player = ::std::option::Option::None;
    }

    pub fn has_current_player(&self) -> bool {
        self.current_player.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_player(&mut self, v: u32) {
        self.current_player = ::std::option::Option::Some(v);
    }

    // required uint32 bottle_pos = 4;

    pub fn bottle_pos(&self) -> u32 {
        self.bottle_pos.unwrap_or(0)
    }

    pub fn clear_bottle_pos(&mut self) {
        self.bottle_pos = ::std::option::Option::None;
    }

    pub fn has_bottle_pos(&self) -> bool {
        self.bottle_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bottle_pos(&mut self, v: u32) {
        self.bottle_pos = ::std::option::Option::Some(v);
    }

    // required uint32 money_left = 5;

    pub fn money_left(&self) -> u32 {
        self.money_left.unwrap_or(0)
    }

    pub fn clear_money_left(&mut self) {
        self.money_left = ::std::option::Option::None;
    }

    pub fn has_money_left(&self) -> bool {
        self.money_left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_money_left(&mut self, v: u32) {
        self.money_left = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "player1_bids",
            |m: &GameState| { &m.player1_bids },
            |m: &mut GameState| { &mut m.player1_bids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "player2_bids",
            |m: &GameState| { &m.player2_bids },
            |m: &mut GameState| { &mut m.player2_bids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "current_player",
            |m: &GameState| { &m.current_player },
            |m: &mut GameState| { &mut m.current_player },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bottle_pos",
            |m: &GameState| { &m.bottle_pos },
            |m: &mut GameState| { &mut m.bottle_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "money_left",
            |m: &GameState| { &m.money_left },
            |m: &mut GameState| { &mut m.money_left },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GameState>(
            "GameState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GameState {
    const NAME: &'static str = "GameState";

    fn is_initialized(&self) -> bool {
        if self.current_player.is_none() {
            return false;
        }
        if self.bottle_pos.is_none() {
            return false;
        }
        if self.money_left.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.player1_bids)?;
                },
                8 => {
                    self.player1_bids.push(is.read_uint32()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.player2_bids)?;
                },
                16 => {
                    self.player2_bids.push(is.read_uint32()?);
                },
                24 => {
                    self.current_player = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.bottle_pos = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.money_left = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.player1_bids {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        for value in &self.player2_bids {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.current_player {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.bottle_pos {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.money_left {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.player1_bids {
            os.write_uint32(1, *v)?;
        };
        for v in &self.player2_bids {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.current_player {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.bottle_pos {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.money_left {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GameState {
        GameState::new()
    }

    fn clear(&mut self) {
        self.player1_bids.clear();
        self.player2_bids.clear();
        self.current_player = ::std::option::Option::None;
        self.bottle_pos = ::std::option::Option::None;
        self.money_left = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GameState {
        static instance: GameState = GameState {
            player1_bids: ::std::vec::Vec::new(),
            player2_bids: ::std::vec::Vec::new(),
            current_player: ::std::option::Option::None,
            bottle_pos: ::std::option::Option::None,
            money_left: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GameState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GameState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GameState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GameState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AuthResponse)
pub struct AuthResponse {
    // message fields
    // @@protoc_insertion_point(field:AuthResponse.player_name)
    pub player_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:AuthResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthResponse {
    fn default() -> &'a AuthResponse {
        <AuthResponse as ::protobuf::Message>::default_instance()
    }
}

impl AuthResponse {
    pub fn new() -> AuthResponse {
        ::std::default::Default::default()
    }

    // required string player_name = 1;

    pub fn player_name(&self) -> &str {
        match self.player_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_player_name(&mut self) {
        self.player_name = ::std::option::Option::None;
    }

    pub fn has_player_name(&self) -> bool {
        self.player_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_name(&mut self, v: ::std::string::String) {
        self.player_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_player_name(&mut self) -> &mut ::std::string::String {
        if self.player_name.is_none() {
            self.player_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.player_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_player_name(&mut self) -> ::std::string::String {
        self.player_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_name",
            |m: &AuthResponse| { &m.player_name },
            |m: &mut AuthResponse| { &mut m.player_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthResponse>(
            "AuthResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthResponse {
    const NAME: &'static str = "AuthResponse";

    fn is_initialized(&self) -> bool {
        if self.player_name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.player_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player_name.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthResponse {
        AuthResponse::new()
    }

    fn clear(&mut self) {
        self.player_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthResponse {
        static instance: AuthResponse = AuthResponse {
            player_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BidResponse)
pub struct BidResponse {
    // message fields
    // @@protoc_insertion_point(field:BidResponse.money)
    pub money: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:BidResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BidResponse {
    fn default() -> &'a BidResponse {
        <BidResponse as ::protobuf::Message>::default_instance()
    }
}

impl BidResponse {
    pub fn new() -> BidResponse {
        ::std::default::Default::default()
    }

    // required uint32 money = 1;

    pub fn money(&self) -> u32 {
        self.money.unwrap_or(0)
    }

    pub fn clear_money(&mut self) {
        self.money = ::std::option::Option::None;
    }

    pub fn has_money(&self) -> bool {
        self.money.is_some()
    }

    // Param is passed by value, moved
    pub fn set_money(&mut self, v: u32) {
        self.money = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "money",
            |m: &BidResponse| { &m.money },
            |m: &mut BidResponse| { &mut m.money },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BidResponse>(
            "BidResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BidResponse {
    const NAME: &'static str = "BidResponse";

    fn is_initialized(&self) -> bool {
        if self.money.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.money = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.money {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.money {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BidResponse {
        BidResponse::new()
    }

    fn clear(&mut self) {
        self.money = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BidResponse {
        static instance: BidResponse = BidResponse {
            money: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BidResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BidResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BidResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BidResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BidReject)
pub struct BidReject {
    // message fields
    // @@protoc_insertion_point(field:BidReject.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:BidReject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BidReject {
    fn default() -> &'a BidReject {
        <BidReject as ::protobuf::Message>::default_instance()
    }
}

impl BidReject {
    pub fn new() -> BidReject {
        ::std::default::Default::default()
    }

    // required string reason = 1;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &BidReject| { &m.reason },
            |m: &mut BidReject| { &mut m.reason },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BidReject>(
            "BidReject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BidReject {
    const NAME: &'static str = "BidReject";

    fn is_initialized(&self) -> bool {
        if self.reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reason.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BidReject {
        BidReject::new()
    }

    fn clear(&mut self) {
        self.reason = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BidReject {
        static instance: BidReject = BidReject {
            reason: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BidReject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BidReject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BidReject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BidReject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AuthReject)
pub struct AuthReject {
    // message fields
    // @@protoc_insertion_point(field:AuthReject.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:AuthReject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthReject {
    fn default() -> &'a AuthReject {
        <AuthReject as ::protobuf::Message>::default_instance()
    }
}

impl AuthReject {
    pub fn new() -> AuthReject {
        ::std::default::Default::default()
    }

    // required string reason = 1;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &AuthReject| { &m.reason },
            |m: &mut AuthReject| { &mut m.reason },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthReject>(
            "AuthReject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthReject {
    const NAME: &'static str = "AuthReject";

    fn is_initialized(&self) -> bool {
        if self.reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reason.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthReject {
        AuthReject::new()
    }

    fn clear(&mut self) {
        self.reason = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthReject {
        static instance: AuthReject = AuthReject {
            reason: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthReject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthReject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthReject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthReject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bComms.proto\"\xba\x04\n\rServerRequest\x120\n\x07msgType\x18\x01\
    \x20\x02(\x0e2\x16.ServerRequest.MsgTypeR\x07msgType\x12\"\n\x07gameEnd\
    \x18\x02\x20\x01(\x0b2\x08.GameEndR\x07gameEnd\x12(\n\tgameState\x18\x03\
    \x20\x01(\x0b2\n.GameStateR\tgameState\x121\n\x0cauthResponse\x18\x04\
    \x20\x01(\x0b2\r.AuthResponseR\x0cauthResponse\x12.\n\x0bbidResponse\x18\
    \x05\x20\x01(\x0b2\x0c.BidResponseR\x0bbidResponse\x12(\n\tbidReject\x18\
    \x06\x20\x01(\x0b2\n.BidRejectR\tbidReject\x12+\n\nauthReject\x18\x07\
    \x20\x01(\x0b2\x0b.AuthRejectR\nauthReject\x12(\n\tgameStart\x18\x08\x20\
    \x01(\x0b2\n.GameStartR\tgameStart\"\xc4\x01\n\x07MsgType\x12\x10\n\x0cA\
    UTH_REQUEST\x10\0\x12\x11\n\rAUTH_RESPONSE\x10\x08\x12\x0f\n\x0bAUTH_REJ\
    ECT\x10\x01\x12\x0f\n\x0bBID_REQUEST\x10\x02\x12\x10\n\x0cBID_RESPONSE\
    \x10\x03\x12\x0e\n\nBID_REJECT\x10\x04\x12\x0e\n\nGAME_START\x10\x05\x12\
    \x0c\n\x08GAME_END\x10\x06\x12\x0e\n\nDISCONNECT\x10\x07\x12\x07\n\x03AC\
    K\x10\t\x12\x0e\n\nGAME_ABORT\x10\n\x12\t\n\x05ALIVE\x10\x0b\"a\n\x07Gam\
    eEnd\x12+\n\x06result\x18\x01\x20\x02(\x0e2\x13.GameEnd.GameResultR\x06r\
    esult\")\n\nGameResult\x12\x07\n\x03WIN\x10\0\x12\x08\n\x04LOSS\x10\x01\
    \x12\x08\n\x04DRAW\x10\x02\"\xb1\x01\n\tGameStart\x12!\n\x0cplayer1_name\
    \x18\x01\x20\x02(\tR\x0bplayer1Name\x12!\n\x0cplayer2_name\x18\x02\x20\
    \x02(\tR\x0bplayer2Name\x12.\n\x13player1_start_money\x18\x03\x20\x02(\r\
    R\x11player1StartMoney\x12.\n\x13player2_start_money\x18\x04\x20\x02(\rR\
    \x11player2StartMoney\"\xb6\x01\n\tGameState\x12!\n\x0cplayer1_bids\x18\
    \x01\x20\x03(\rR\x0bplayer1Bids\x12!\n\x0cplayer2_bids\x18\x02\x20\x03(\
    \rR\x0bplayer2Bids\x12%\n\x0ecurrent_player\x18\x03\x20\x02(\rR\rcurrent\
    Player\x12\x1d\n\nbottle_pos\x18\x04\x20\x02(\rR\tbottlePos\x12\x1d\n\nm\
    oney_left\x18\x05\x20\x02(\rR\tmoneyLeft\"/\n\x0cAuthResponse\x12\x1f\n\
    \x0bplayer_name\x18\x01\x20\x02(\tR\nplayerName\"#\n\x0bBidResponse\x12\
    \x14\n\x05money\x18\x01\x20\x02(\rR\x05money\"#\n\tBidReject\x12\x16\n\
    \x06reason\x18\x01\x20\x02(\tR\x06reason\"$\n\nAuthReject\x12\x16\n\x06r\
    eason\x18\x01\x20\x02(\tR\x06reasonJ\xf9\x14\n\x06\x12\x04\0\0\\\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0(\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x02\x08\x15\n\x0c\n\x04\x04\0\x04\0\x12\x04\x03\
    \x02\x16\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x03\x07\x0e\n\r\n\x06\
    \x04\0\x04\0\x02\0\x12\x03\x04\x04\x15\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\
    \x12\x03\x04\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x04\x13\
    \x14\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x05\x04\x16\n\x0e\n\x07\x04\0\
    \x04\0\x02\x01\x01\x12\x03\x05\x04\x11\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x02\x12\x03\x05\x14\x15\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x06\x04\
    \x14\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x06\x04\x0f\n\x0e\n\x07\
    \x04\0\x04\0\x02\x02\x02\x12\x03\x06\x12\x13\n\r\n\x06\x04\0\x04\0\x02\
    \x03\x12\x03\x08\x04\x14\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\x08\
    \x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03\x08\x12\x13\n\r\n\
    \x06\x04\0\x04\0\x02\x04\x12\x03\t\x04\x15\n\x0e\n\x07\x04\0\x04\0\x02\
    \x04\x01\x12\x03\t\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\x04\x02\x12\x03\t\
    \x13\x14\n\r\n\x06\x04\0\x04\0\x02\x05\x12\x03\n\x04\x13\n\x0e\n\x07\x04\
    \0\x04\0\x02\x05\x01\x12\x03\n\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x05\
    \x02\x12\x03\n\x11\x12\n\r\n\x06\x04\0\x04\0\x02\x06\x12\x03\x0c\x04\x13\
    \n\x0e\n\x07\x04\0\x04\0\x02\x06\x01\x12\x03\x0c\x04\x0e\n\x0e\n\x07\x04\
    \0\x04\0\x02\x06\x02\x12\x03\x0c\x11\x12\n\r\n\x06\x04\0\x04\0\x02\x07\
    \x12\x03\r\x04\x11\n\x0e\n\x07\x04\0\x04\0\x02\x07\x01\x12\x03\r\x04\x0c\
    \n\x0e\n\x07\x04\0\x04\0\x02\x07\x02\x12\x03\r\x0f\x10\n\r\n\x06\x04\0\
    \x04\0\x02\x08\x12\x03\x0f\x04\x13\n\x0e\n\x07\x04\0\x04\0\x02\x08\x01\
    \x12\x03\x0f\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x08\x02\x12\x03\x0f\x11\
    \x12\n\r\n\x06\x04\0\x04\0\x02\t\x12\x03\x11\x04\x0c\n\x0e\n\x07\x04\0\
    \x04\0\x02\t\x01\x12\x03\x11\x04\x07\n\x0e\n\x07\x04\0\x04\0\x02\t\x02\
    \x12\x03\x11\n\x0b\n\r\n\x06\x04\0\x04\0\x02\n\x12\x03\x13\x04\x14\n\x0e\
    \n\x07\x04\0\x04\0\x02\n\x01\x12\x03\x13\x04\x0e\n\x0e\n\x07\x04\0\x04\0\
    \x02\n\x02\x12\x03\x13\x11\x13\n\r\n\x06\x04\0\x04\0\x02\x0b\x12\x03\x14\
    \x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\x0b\x01\x12\x03\x14\x04\t\n\x0e\n\
    \x07\x04\0\x04\0\x02\x0b\x02\x12\x03\x14\x0c\x0e\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x17\x02\x1f\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x17\x02\n\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03\x17\x0b\x12\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x17\x13\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x1d\x1e\n7\
    \n\x04\x04\0\x02\x01\x12\x03\x1a\x02\x1f\x1a*\x20The\x20game\x20has\x20e\
    nded.\x20Provide\x20the\x20results.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\x1a\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x1a\x0b\x12\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x1a\x13\x1a\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x1a\x1d\x1e\n&\n\x04\x04\0\x02\x02\x12\x03\x1d\x02#\x1a\x19\x20\
    Provided\x20in\x20BID_REQUEST\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\
    \x1d\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1d\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x1d\x15\x1e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x1d!\"\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x1f\x02)\n\x0c\n\x05\x04\0\
    \x02\x03\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x1f\
    \x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1f\x18$\n\x0c\n\x05\x04\
    \0\x02\x03\x03\x12\x03\x1f'(\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x20\x02'\
    \n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x20\x02\n\n\x0c\n\x05\x04\0\x02\
    \x04\x06\x12\x03\x20\x0b\x16\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x20\
    \x17\"\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x20%&\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03\"\x02#\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\"\x02\n\n\x0c\
    \n\x05\x04\0\x02\x05\x06\x12\x03\"\x0b\x14\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03\"\x15\x1e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\"!\"\n\x0b\n\
    \x04\x04\0\x02\x06\x12\x03$\x02%\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03$\
    \x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03$\x0b\x15\n\x0c\n\x05\x04\0\
    \x02\x06\x01\x12\x03$\x16\x20\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03$#$\n\
    \x0b\n\x04\x04\0\x02\x07\x12\x03&\x02#\n\x0c\n\x05\x04\0\x02\x07\x04\x12\
    \x03&\x02\n\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03&\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\x07\x01\x12\x03&\x15\x1e\n\x0c\n\x05\x04\0\x02\x07\x03\x12\
    \x03&!\"\n\n\n\x02\x04\x01\x12\x04*\02\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    *\x08\x0f\n\x0c\n\x04\x04\x01\x04\0\x12\x04+\x02/\x03\n\x0c\n\x05\x04\
    \x01\x04\0\x01\x12\x03+\x07\x11\n\r\n\x06\x04\x01\x04\0\x02\0\x12\x03,\
    \x04\x0c\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03,\x04\x07\n\x0e\n\
    \x07\x04\x01\x04\0\x02\0\x02\x12\x03,\n\x0b\n\r\n\x06\x04\x01\x04\0\x02\
    \x01\x12\x03-\x04\r\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03-\x04\
    \x08\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x03-\x0b\x0c\n\r\n\x06\
    \x04\x01\x04\0\x02\x02\x12\x03.\x04\r\n\x0e\n\x07\x04\x01\x04\0\x02\x02\
    \x01\x12\x03.\x04\x08\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03.\x0b\
    \x0c\n\x0b\n\x04\x04\x01\x02\0\x12\x031\x02!\n\x0c\n\x05\x04\x01\x02\0\
    \x04\x12\x031\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x031\x0b\x15\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x031\x16\x1c\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x031\x1f\x20\n\n\n\x02\x04\x02\x12\x044\09\x01\n\n\n\x03\x04\x02\
    \x01\x12\x034\x08\x11\n\x0b\n\x04\x04\x02\x02\0\x12\x035\x02#\n\x0c\n\
    \x05\x04\x02\x02\0\x04\x12\x035\x02\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x035\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x035\x12\x1e\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x035!\"\n\x0b\n\x04\x04\x02\x02\x01\x12\x036\x02#\
    \n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x036\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x036\x0b\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x036\x12\
    \x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x036!\"\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x037\x02*\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x037\x02\n\n\x0c\
    \n\x05\x04\x02\x02\x02\x05\x12\x037\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\
    \x01\x12\x037\x12%\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x037()\n\x0b\n\
    \x04\x04\x02\x02\x03\x12\x038\x02*\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\
    \x038\x02\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x038\x0b\x11\n\x0c\n\x05\
    \x04\x02\x02\x03\x01\x12\x038\x12%\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x038()\n\n\n\x02\x04\x03\x12\x04;\0L\x01\n\n\n\x03\x04\x03\x01\x12\x03;\
    \x08\x11\n\x1d\n\x04\x04\x03\x02\0\x12\x03>\x02#\x1a\x10\x20player1's\
    \x20bids\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\
    \x03\x02\0\x05\x12\x03>\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03>\
    \x12\x1e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03>!\"\n\x1e\n\x04\x04\x03\
    \x02\x01\x12\x03A\x02#\x1a\x11\x20player2's\x20bids.\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x04\x12\x03A\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03A\
    \x0b\x11\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03A\x12\x1e\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03A!\"\n*\n\x04\x04\x03\x02\x02\x12\x03D\x02%\
    \x1a\x1d\x20Who\x20the\x20receiving\x20player\x20is\n\n\x0c\n\x05\x04\
    \x03\x02\x02\x04\x12\x03D\x02\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03D\
    \x0b\x11\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03D\x12\x20\n\x0c\n\x05\
    \x04\x03\x02\x02\x03\x12\x03D#$\n#\n\x04\x04\x03\x02\x03\x12\x03G\x02!\
    \x1a\x16\x20Where\x20is\x20the\x20bottle?\n\n\x0c\n\x05\x04\x03\x02\x03\
    \x04\x12\x03G\x02\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03G\x0b\x11\n\
    \x0c\n\x05\x04\x03\x02\x03\x01\x12\x03G\x12\x1c\n\x0c\n\x05\x04\x03\x02\
    \x03\x03\x12\x03G\x1f\x20\n(\n\x04\x04\x03\x02\x04\x12\x03J\x02!\x1a\x1b\
    \x20Current\x20player\x20money\x20left\n\n\x0c\n\x05\x04\x03\x02\x04\x04\
    \x12\x03J\x02\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03J\x0b\x11\n\x0c\n\
    \x05\x04\x03\x02\x04\x01\x12\x03J\x12\x1c\n\x0c\n\x05\x04\x03\x02\x04\
    \x03\x12\x03J\x1f\x20\n\n\n\x02\x04\x04\x12\x04N\0P\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03N\x08\x14\n\x0b\n\x04\x04\x04\x02\0\x12\x03O\x02\"\n\x0c\
    \n\x05\x04\x04\x02\0\x04\x12\x03O\x02\n\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03O\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03O\x12\x1d\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03O\x20!\n\n\n\x02\x04\x05\x12\x04R\0T\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03R\x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x03S\
    \x02\x1c\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03S\x02\n\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03S\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03S\
    \x12\x17\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03S\x1a\x1b\n\n\n\x02\x04\
    \x06\x12\x04V\0X\x01\n\n\n\x03\x04\x06\x01\x12\x03V\x08\x11\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x03W\x02\x1d\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03W\
    \x02\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03W\x0b\x11\n\x0c\n\x05\x04\
    \x06\x02\0\x01\x12\x03W\x12\x18\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03W\
    \x1b\x1c\n\n\n\x02\x04\x07\x12\x04Z\0\\\x01\n\n\n\x03\x04\x07\x01\x12\
    \x03Z\x08\x12\n\x0b\n\x04\x04\x07\x02\0\x12\x03[\x02\x1d\n\x0c\n\x05\x04\
    \x07\x02\0\x04\x12\x03[\x02\n\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03[\x0b\
    \x11\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03[\x12\x18\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03[\x1b\x1c\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(ServerRequest::generated_message_descriptor_data());
            messages.push(GameEnd::generated_message_descriptor_data());
            messages.push(GameStart::generated_message_descriptor_data());
            messages.push(GameState::generated_message_descriptor_data());
            messages.push(AuthResponse::generated_message_descriptor_data());
            messages.push(BidResponse::generated_message_descriptor_data());
            messages.push(BidReject::generated_message_descriptor_data());
            messages.push(AuthReject::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(server_request::MsgType::generated_enum_descriptor_data());
            enums.push(game_end::GameResult::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
